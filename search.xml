<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CS106L课程笔记</title>
      <link href="/2023/02/14/cs106l-ke-cheng-bi-ji/"/>
      <url>/2023/02/14/cs106l-ke-cheng-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="lecture01-streams">Lecture01 Streams</h2><h3 id="的坑">&gt;&gt;的坑</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> dummyInt<span class="token punctuation">;</span>string dummyString<span class="token punctuation">;</span>cin <span class="token operator">>></span> dummyInt<span class="token punctuation">;</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> dummyString<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当输入为 <pre class="line-numbers language-none"><code class="language-none">3hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre> 时，会发现dummyString中并没有储存hello，这是因为&gt;&gt;（stream extractionoperator）在读入时会跳过空格（whitespace）和换行符（newline），而getline()不会。&gt;&gt;从cin流读取3后，会遗留下一个换行符（newline）在cin中，其被getline()读取，getline()误以为这是用户输入完dummyString后敲入的回车，结束读入，导致dummyString中只有一个空字符串。</p><h3 id="writing-getinteger">Writing GetInteger</h3><p>借助于stringstream，我们可以很方便地完成string到int等类型的转换:<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">stringstream myConverter<span class="token punctuation">;</span><span class="token keyword">int</span> myInt<span class="token punctuation">;</span>string myString<span class="token punctuation">;</span><span class="token keyword">double</span> myDouble<span class="token punctuation">;</span>myConverter <span class="token operator">&lt;&lt;</span> <span class="token string">"137 Hello 2.71"</span><span class="token punctuation">;</span>myConverter <span class="token operator">>></span> myInt <span class="token operator">>></span> myString <span class="token operator">>></span> myDouble<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 我们可以类似地构造一个GerInteger()函数： <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">GetInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  stringstream converter<span class="token punctuation">;</span>  converter <span class="token operator">&lt;&lt;</span> <span class="token function">GetLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span>  converter <span class="token operator">>></span> result<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>但是这样的代码会遇到两个无法解决的情况: 1. 用户输入非int类型的值（eg.输入 hello） 2. 用户输入多于一个值（eg. 输入 3 hello）</p><p>对于第一种情况很好判断，我们只需要判断getline()后，cin的状态有没有变为fail。</p><p>而对于第二种情况，我们可以再次从cin中读取一个字符，如果cin的状态没有变为fail，说明cin中有多于一个值</p><p>代码如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">GetInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//直到用户输入合法数据</span>    stringstream converter<span class="token punctuation">;</span>    converter <span class="token operator">&lt;&lt;</span> <span class="token function">GetLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>converter <span class="token operator">>></span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">char</span> remaining<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>converter <span class="token operator">>></span> remaining<span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Unexpected character: "</span> <span class="token operator">&lt;&lt;</span> remaining <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//多于一个值</span>      <span class="token keyword">else</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please enter an integer."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//类型不符</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Retry: "</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="practice-problems">Practice Problems</h3><blockquote><p>How do you write data to a file in C++</p></blockquote><p>ofstream fileStream("kzxsb.out"); fileStream &lt;&lt; "helloWorld"&lt;&lt; endl; return 0;</p><blockquote><p>What does the <em>setw</em> manipulator do? What does the<em>setfill</em> manipulator do? How do you use them?</p></blockquote><p>setw的作用是设置输出的域宽，当紧跟着的输出长度小于n时，会补全填充字符，当紧跟着的输出长度大于n时，会直接全部输出。</p><p>setfill的作用是设置填充字符。</p><p>可以通过</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cout <span class="token operator">&lt;&lt;</span> <span class="token function">setfill</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span>Width<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">""</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出Width个-。</p><blockquote><p>What is stream failure? How do you check for it?</p></blockquote><p>当你尝试将某种类型的Stream读入到另一种类型的变量中时，这个Stream会进入到errorstate， 也就是failure。</p><p>我们可以通过 <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">myStream<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>来检测一个Stream是否处在failure的状态。</p><blockquote><p>What is a <em>stringstream</em>?</p></blockquote><p>stringstream是一种iostream（输入输出流）,它可以很方便地进行类型转换。</p><blockquote><p>Using a <em>stringstream</em>, write a function that converts an<strong>int</strong> into a <strong>string</strong>.</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">IntToString</span><span class="token punctuation">(</span><span class="token keyword">int</span> myInt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  stringstream converter<span class="token punctuation">;</span>  converter <span class="token operator">&lt;&lt;</span> myInt<span class="token punctuation">;</span>    string result<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>converter <span class="token operator">>></span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> remaining<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>converter <span class="token operator">>></span> remaining<span class="token punctuation">)</span>      <span class="token keyword">throw</span> <span class="token function">domain_error</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>    <span class="token keyword">throw</span> <span class="token function">domain_error</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Modify the code for <em>GetInteger</em> to create a function<em>GetReal</em> that reads a real number from the user. How much didyou need to modify to make this code work?</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token function">GetReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stringstream converter<span class="token punctuation">;</span>    converter <span class="token operator">&lt;&lt;</span> <span class="token function">GetLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>converter <span class="token operator">>></span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> remaining<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>converter <span class="token operator">>></span> remaining<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token function">domain_error</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>        <span class="token keyword">throw</span> <span class="token function">domain_error</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Retry: "</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Modify the code for <em>GerInteger</em> and the <em>boolalpha</em>stream manipulator, write a function <em>GetBoolean</em> that waits forthe user to enter "true" or "false" and returns the correspondingboolean value.</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">GetBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stringstream converter<span class="token punctuation">;</span>    converter <span class="token operator">&lt;&lt;</span> <span class="token function">GetLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>converter <span class="token operator">>></span> boolalpha <span class="token operator">>></span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> remaining<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>converter <span class="token operator">>></span> remaining<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token function">domain_error</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>        <span class="token keyword">throw</span> <span class="token function">domain_error</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Retry: "</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> cpp </tag>
            
            <tag> 网课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dive into Deep Learning 笔记及作业解答</title>
      <link href="/2023/01/30/dive-into-deep-learning-bi-ji-ji-zuo-ye-jie-da/"/>
      <url>/2023/01/30/dive-into-deep-learning-bi-ji-ji-zuo-ye-jie-da/</url>
      
        <content type="html"><![CDATA[<h1 id="预备知识">2.预备知识</h1><h2 id="数据操作">2.1数据操作</h2><h3 id="练习1">练习1</h3><blockquote><p>运行本节中的代码。运行本节中的代码。将本节中的条件语句X == Y更改为X&lt; Y或X &gt; Y，然后看看你可以得到什么样的张量。 <pre class="line-numbers language-python" data-language="python"><code class="language-python">X <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">X <span class="token operator">></span> Y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 结果略</p></blockquote><h3 id="练习2">练习2</h3><blockquote><p>用其他形状（例如三维张量）替换广播机制中按元素操作的两个张量。结果是否与预期相同？</p></blockquote><p>与预期结果相同</p><p>运行 <pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre> 输出为: <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 再运行 <pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">+</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>结果为： <pre class="line-numbers language-python" data-language="python"><code class="language-python">tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="广播机制">广播机制</h3><p>要求进行运算的两个张量满足：<strong>相应维度的大小要么相同，要么其中有一个为1.</strong></p><h2 id="数据预处理">2.2 数据预处理</h2><h3 id="练习1-1">练习1</h3><blockquote><p>删除缺失值最多的列</p></blockquote><p>对于数据： <pre class="line-numbers language-python" data-language="python"><code class="language-python">   NumRooms Alley   Price<span class="token number">0</span>       NaN  Pave  <span class="token number">127500</span><span class="token number">1</span>       <span class="token number">2.0</span>   NaN  <span class="token number">106000</span><span class="token number">2</span>       <span class="token number">4.0</span>   NaN  <span class="token number">178100</span><span class="token number">3</span>       NaN   NaN  <span class="token number">140000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre> 方案1： <pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#判断是否缺少值</span><span class="token comment"># 输出为</span>NumRoomsAlleyPrice<span class="token number">0</span><span class="token boolean">True</span><span class="token boolean">False</span><span class="token boolean">False</span><span class="token number">1</span><span class="token boolean">False</span><span class="token boolean">True</span><span class="token boolean">False</span><span class="token number">2</span><span class="token boolean">False</span><span class="token boolean">True</span><span class="token boolean">False</span><span class="token number">3</span><span class="token boolean">True</span><span class="token boolean">True</span><span class="token boolean">False</span>data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#计算列中缺失总数</span><span class="token comment">#或者： data.isnull().sum(axis=0)</span><span class="token comment">#输出为</span>NumRooms    <span class="token number">2</span>Alley       <span class="token number">3</span>Price       <span class="token number">0</span>data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>idxmax<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#得到最大缺失值的索引</span><span class="token comment">#输出为</span>‘Alley’data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>idxmax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#按列删除 ‘Alley’</span><span class="token comment">#输出为</span>NumRoomsPrice<span class="token number">0</span>NaN<span class="token number">127500</span><span class="token number">1</span><span class="token number">2.0</span><span class="token number">106000</span><span class="token number">2</span><span class="token number">4.0</span><span class="token number">178100</span><span class="token number">3</span>NaN<span class="token number">140000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>注：若想删去缺失值最多的行可以data.sum()改为data.sum(axis=1)</p><p>方案2： <pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>count<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span> <span class="token comment">#按列得到非缺失值的个数，</span><span class="token comment">#输出为</span>NumRooms    <span class="token number">2</span>Alley       <span class="token number">1</span>Price       <span class="token number">4</span>data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>data<span class="token punctuation">.</span>count<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>idxmin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#不替换原data</span><span class="token comment">#输出为</span>NumRoomsPrice<span class="token number">0</span>NaN<span class="token number">127500</span><span class="token number">1</span><span class="token number">2.0</span><span class="token number">106000</span><span class="token number">2</span><span class="token number">4.0</span><span class="token number">178100</span><span class="token number">3</span>NaN<span class="token number">140000</span>data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>data<span class="token punctuation">.</span>count<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>idxmin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment">#替换原来的data</span><span class="token comment">#输出为</span>NumRoomsPrice<span class="token number">0</span>NaN<span class="token number">127500</span><span class="token number">1</span><span class="token number">2.0</span><span class="token number">106000</span><span class="token number">2</span><span class="token number">4.0</span><span class="token number">178100</span><span class="token number">3</span>NaN<span class="token number">140000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>注：若想删去缺失值最多的行可以data.count(axis='index')改为data.count(axis='column')</p><h3 id="练习2-1">练习2</h3><blockquote><p>将预处理后的数据集转换为张量格式 <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torcha <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>data<span class="token punctuation">.</span>values<span class="token punctuation">)</span>a<span class="token comment">#输出为</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>       nan<span class="token punctuation">,</span> <span class="token number">1.2750e+05</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">2.0000e+00</span><span class="token punctuation">,</span> <span class="token number">1.0600e+05</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">4.0000e+00</span><span class="token punctuation">,</span> <span class="token number">1.7810e+05</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span>       nan<span class="token punctuation">,</span> <span class="token number">1.4000e+05</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></blockquote><h2 id="线性代数">2.3 线性代数</h2><h3 id="练习3">练习3</h3><blockquote><p>给定任意方阵<span class="math inline">\(\mathbf{A}\)</span>，<spanclass="math inline">\(\mathbf{A}+\mathbf{A}^\text{T}\)</span>总是对称的吗？</p></blockquote><p><span class="math display">\[(\mathbf{A}+\mathbf{A}^\text{T})_{ij}=\mathbf{A}_{ij}+\mathbf{A}^\text{T}_{ij}=\mathbf{A}^\text{T}_{ji}+\mathbf{A}_{ji}=(\mathbf{A}+\mathbf{A}^\text{T})_{ji}\]</span></p><h3 id="练习4-与-练习5">练习4 与 练习5</h3><blockquote><p>本节中定义了形状<spanclass="math inline">\((2,3,4)\)</span>的张量X。len(X)的输出结果是什么？对于任意形状的张量X,len(X)是否总是对应于X特定轴的长度?这个轴是什么?</p></blockquote><p>X的第0轴长度</p><h3 id="练习6">练习6</h3><blockquote><p>运行A/A.sum(axis=1)，看看会发生什么。请分析一下原因？</p></blockquote><p>会输出： <pre class="line-numbers language-python" data-language="python"><code class="language-python">RuntimeError<span class="token punctuation">:</span> The size of tensor a <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> must <span class="token keyword">match</span> the size of tensor b <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> at non<span class="token operator">-</span>singleton dimension <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>因为A.sum(axis=1)相较于A减少了第1轴，无法进行运算。</p><h3 id="练习7">练习7</h3><blockquote><p>考虑一个具有形状<spanclass="math inline">\((2,3,4)\)</span>的张量，在轴0、1、2上的求和输出是什么形状?<pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></blockquote><h3 id="练习8">练习8</h3><blockquote><p>为linalg.norm函数提供3个或更多轴的张量，并观察其输出。对于任意形状的张量这个函数计算得到什么?</p></blockquote><p>所有元素平方和的平方根</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 习题解答 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
